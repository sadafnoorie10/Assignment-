{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QWT4qy61HhTm"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1) explain the key features of python that make it a popular choice for programming"
      ],
      "metadata": {
        "id": "KoiQ6N7-HljU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Python is a high-level, versatile, and widely-used programming language that has gained immense popularity due to its simplicity, flexibility, and scalability. Here are the key features that make Python a popular choice for programming:\n",
        "\n",
        "*Easy to Learn and Use*\n",
        "\n",
        "1. Simple syntax: Python's syntax is concise, readable, and easy to understand.\n",
        "2. Forgiving: Python is dynamically-typed, allowing for flexibility in coding.\n",
        "3. Extensive libraries: Python's vast library collection simplifies tasks.\n",
        "\n",
        "*Versatility*\n",
        "\n",
        "1. Cross-platform: Python runs on Windows, macOS, Linux, and mobile platforms.\n",
        "2. Multi-paradigm: Supports object-oriented, imperative, and functional programming.\n",
        "3. Extensive use cases: Web development, data science, machine learning, automation, scripting, and more.\n",
        "\n",
        "*Powerful Features*\n",
        "\n",
        "1. Dynamic typing: No need for explicit variable declarations.\n",
        "2. Memory management: Automatic memory allocation and garbage collection.\n",
        "3. Exception handling: Robust error handling mechanisms.\n",
        "4. Modules and packages: Organize and reuse code.\n",
        "5. Lambda functions: Concise, anonymous functions.\n",
        "\n",
        "*Large Community and Ecosystem*\n",
        "\n",
        "1. Open-source: Active community contributes to Python's growth.\n",
        "2. Extensive libraries and frameworks: Django, Flask, NumPy, pandas, scikit-learn, TensorFlow, etc.\n",
        "3. Tools and IDEs: PyCharm, Visual Studio Code, Spyder, Jupyter Notebook, etc.\n",
        "\n",
        "*Data Science and Machine Learning*\n",
        "\n",
        "1. NumPy and pandas: Efficient data manipulation and analysis.\n",
        "2. Matplotlib and Seaborn: Data visualization.\n",
        "3. Scikit-learn and TensorFlow: Machine learning and deep learning.\n",
        "4. Jupyter Notebook: Interactive data science environment.\n",
        "\n",
        "*Web Development*\n",
        "\n",
        "1. Django and Flask: Popular web frameworks.\n",
        "2. Pyramid and Bottle: Lightweight frameworks.\n",
        "3. Requests and BeautifulSoup: Web scraping and crawling.\n",
        "\n",
        "*Automation and Scripting*\n",
        "\n",
        "1. Easy system administration: Automate tasks with Python.\n",
        "2. Scripting: Automate workflows, data processing, and file management.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "YbnZbOH3HxWv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "xDBj_J-vJB43"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2) describe the role of predefined keywords in python and provide examples of how they are used in a program"
      ],
      "metadata": {
        "id": "s6UAgwJYISBK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In Python, predefined keywords are reserved words that have special meanings and are used to define the structure and logic of a program. These keywords are used to specify the actions to be taken, control the flow of the program, and define the relationships between variables.\n",
        "\n",
        "*List of Python Keywords:*\n",
        "\n",
        "Here are some of the most commonly used Python keywords:\n",
        "\n",
        "1. Conditional keywords:\n",
        "    - `if`\n",
        "    - `elif`\n",
        "    - `else`\n",
        "2. Looping keywords:\n",
        "    - `for`\n",
        "    - `while`\n",
        "    - `break`\n",
        "    - `continue`\n",
        "3. Function definition keywords:\n",
        "    - `def`\n",
        "    - `lambda`\n",
        "4. Variable assignment keywords:\n",
        "    - `=` (assignment)\n",
        "    - `+=` (addition assignment)\n",
        "    - `-=` (subtraction assignment)\n",
        "    - `*=` (multiplication assignment)\n",
        "    - `/=` (division assignment)\n",
        "5. Control flow keywords:\n",
        "    - `return`\n",
        "    - `yield`\n",
        "    - `pass`\n",
        "    - `del`\n",
        "6. Exception handling keywords:\n",
        "    - `try`\n",
        "    - `except`\n",
        "    - `finally`\n",
        "    - `raise`\n",
        "7. Import keywords:\n",
        "    - `import`\n",
        "    - `from`\n",
        "    - `as`\n",
        "8. Class definition keywords:\n",
        "    - `class`\n",
        "    - `inherit`\n",
        "\n",
        "*Examples of Keyword Usage:*\n",
        "\n",
        "1. Conditional Statement:\n",
        "\n",
        "```\n",
        "x = 5\n",
        "if x > 10:\n",
        "    print(\"x is greater than 10\")\n",
        "else:\n",
        "    print(\"x is less than or equal to 10\")\n",
        "```\n",
        "\n",
        "1. Looping:\n",
        "\n",
        "```\n",
        "fruits = [\"apple\", \"banana\", \"cherry\"]\n",
        "for fruit in fruits:\n",
        "    print(fruit)\n",
        "```\n",
        "\n",
        "1. Function Definition:\n",
        "\n",
        "```\n",
        "def greet(name):\n",
        "    print(\"Hello, \" + name + \"!\")\n",
        "\n",
        "greet(\"John\")\n",
        "```\n",
        "\n",
        "1. Variable Assignment:\n",
        "\n",
        "```\n",
        "x = 5\n",
        "x += 3\n",
        "print(x)  # Output: 8\n",
        "```\n",
        "\n",
        "1. Exception Handling:\n",
        "\n",
        "```\n",
        "try:\n",
        "    x = 5 / 0\n",
        "except ZeroDivisionError:\n",
        "    print(\"Error: Division by zero!\")\n",
        "```\n",
        "\n",
        "1. Import Statement:\n",
        "\n",
        "```\n",
        "import math\n",
        "print(math.pi)\n",
        "```\n",
        "\n",
        "1. Class Definition:\n",
        "\n",
        "```\n",
        "class Person:\n",
        "    def __init__(self, name, age):\n",
        "        self.name = name\n",
        "        self.age = age\n",
        "\n",
        "person = Person(\"John\", 30)\n",
        "print\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "2dYA2qyaJDQ3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3) compare and contrast mutable and immutable objects in python with examples"
      ],
      "metadata": {
        "id": "bBacGfFYKqr9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In Python, objects can be classified into two categories: mutable and immutable.\n",
        "\n",
        "*Mutable Objects:*\n",
        "\n",
        "Mutable objects can be modified after creation. Their values can be changed.\n",
        "\n",
        "Examples:\n",
        "\n",
        "1. Lists\n",
        "2. Dictionaries\n",
        "3. Sets\n",
        "4. User-defined classes (unless explicitly made immutable)\n",
        "\n",
        "*Immutable Objects:*\n",
        "\n",
        "Immutable objects cannot be modified after creation. Their values remain constant.\n",
        "\n",
        "Examples:\n",
        "\n",
        "1. Integers\n",
        "2. Floats\n",
        "3. Strings\n",
        "4. Tuples\n",
        "5. Boolean values\n",
        "\n",
        "*Comparison of Mutable and Immutable Objects:*\n",
        "\n",
        "|  | Mutable | Immutable |\n",
        "| --- | --- | --- |\n",
        "| Can be modified? | Yes | No |\n",
        "| Value changes allowed? | Yes | No |\n",
        "| Memory allocation | Dynamic | Static |\n",
        "| Examples | Lists, Dicts, Sets | Integers, Strings, Tuples |\n",
        "\n",
        "*Examples and Demonstrations:*\n",
        "\n",
        "*Mutable Objects:*\n",
        "\n",
        "```\n",
        "# List (mutable)\n",
        "my_list = [1, 2, 3]\n",
        "my_list[0] = 10  # modify the list\n",
        "print(my_list)  # [10, 2, 3]\n",
        "\n",
        "# Dictionary (mutable)\n",
        "my_dict = {\"name\": \"John\"}\n",
        "my_dict[\"age\"] = 30  # add a new key-value pair\n",
        "print(my_dict)  # {\"name\": \"John\", \"age\": 30}\n",
        "```\n",
        "\n",
        "*Immutable Objects:*\n",
        "\n",
        "```\n",
        "# Integer (immutable)\n",
        "my_int = 5\n",
        "# my_int[0] = 10  # Error: 'int' object does not support item assignment\n",
        "\n",
        "# String (immutable)\n",
        "my_str = \"hello\"\n",
        "# my_str[0] = \"H\"  # Error: 'str' object does not support item assignment\n",
        "\n",
        "# Tuple (immutable)\n",
        "my_tuple = (1, 2, 3)\n",
        "# my_tuple[0] = 10  # Error: 'tuple' object does not support item assignment\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        ".\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "WiLAQLouLNrm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4) discuss the different types of operators in python and provide examples of how they are used"
      ],
      "metadata": {
        "id": "JWOMPK17NESQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Python has various types of operators that perform different operations. Here's a comprehensive overview:\n",
        "\n",
        "*1. Arithmetic Operators*\n",
        "\n",
        "Perform mathematical operations.\n",
        "\n",
        "| Operator | Description | Example |\n",
        "| --- | --- | --- |\n",
        "| `+` | Addition | `a = 2 + 3` (5) |\n",
        "| `-` | Subtraction | `a = 5 - 2` (3) |\n",
        "| `*` | Multiplication | `a = 4 * 5` (20) |\n",
        "| `/` | Division | `a = 10 / 2` (5) |\n",
        "| `//` | Floor Division | `a = 10 // 3` (3) |\n",
        "| `%` | Modulus (Remainder) | `a = 10 % 3` (1) |\n",
        "| `**` | Exponentiation | `a = 2 ** 3` (8) |\n",
        "\n",
        "*2. Comparison Operators*\n",
        "\n",
        "Compare values.\n",
        "\n",
        "| Operator | Description | Example |\n",
        "| --- | --- | --- |\n",
        "| `==` | Equal | `a = 5; b = 5; a == b` (True) |\n",
        "| `!=` | Not Equal | `a = 5; b = 3; a != b` (True) |\n",
        "| `>` | Greater Than | `a = 5; b = 3; a > b` (True) |\n",
        "| `<` | Less Than | `a = 3; b = 5; a < b` (True) |\n",
        "| `>=` | Greater Than or Equal | `a = 5; b = 5; a >= b` (True) |\n",
        "| `<=` | Less Than or Equal | `a = 3; b = 5; a <= b` (True) |\n",
        "\n",
        "*3. Logical Operators*\n",
        "\n",
        "Perform logical operations.\n",
        "\n",
        "| Operator | Description | Example |\n",
        "| --- | --- | --- |\n",
        "| `and` | Logical AND | `a = True; b = True; a and b` (True) |\n",
        "| `or` | Logical OR | `a = True; b = False; a or b` (True) |\n",
        "| `not` | Logical NOT | `a = True; not a` (False) |\n",
        "\n",
        "*4. Assignment Operators*\n",
        "\n",
        "Assign values.\n",
        "\n",
        "| Operator | Description | Example |\n",
        "| --- | --- | --- |\n",
        "| `=` | Assign | `a = 5` |\n",
        "| `+=` | Add and Assign | `a = 5; a += 3` (8) |\n",
        "| `-=` | Subtract and Assign | `a = 5; a -= 3` (2) |\n",
        "| `*=` | Multiply and Assign | `a = 5; a *= 3` (15) |\n",
        "| `/=` | Divide and Assign | `a = 10; a /= 2` (5) |\n",
        "| `//=` | Floor Divide and Assign | `a = 10; a //= 3` (3) |\n",
        "| `%=` | Modulus and Assign | `a = 10; a %= 3` (1) |\n",
        "| `**=` | Exponentiate and Assign | `a = 2; a **= 3` (8) |\n",
        "\n",
        "*5. Bitwise Operators*\n",
        "\n",
        "Perform binary operations.\n",
        "\n",
        "| Operator | Description | Example |\n",
        "| --- | --- | --- |\n",
        "| `&` | Bitwise AND | `a = 5; b = 3; a & b` (1) |\n",
        "| `|` | Bitwise OR | `a = 5; b = 3; a | b` (7) |\n",
        "| `^` | Bitwise XOR | `a = 5; b = 3; a ^ b` (6) |\n",
        "| `~` | Bitwise NOT | `a = 5; ~a` (-6) |\n",
        "| `<<` | Left Shift | `a = 5; a << 2` (20) |\n",
        "| `>>` | Right Shift | `a = 20; a >> 2` (5) |\n",
        "\n",
        "*6. Membership Operators*\n",
        "\n",
        "Check membership.\n",
        "\n",
        "| Operator | Description | Example |\n",
        "| --- | --- | --- |\n",
        "| `in` | Check membership | `a = [1, 2, 3]; 2 in a` (True) |\n",
        "| `not in` | Check non-membership | `a = [1, 2, 3]; 4 not in a` (True) |\n",
        "\n",
        "*7. Identity Operators*\n",
        "\n",
        "Check identity.\n",
        "\n",
        "| Operator | Description | Example |\n",
        "| --- | --- | --- |\n",
        "| `is` | Check identity | `a = [1, 2, 3]; b = [1, 2, 3]; a is b` (False) |\n",
        "| `is not` | Check non-identity | `a = [1, 2, 3]; b ="
      ],
      "metadata": {
        "id": "Rxgt21x_Nf3-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Type casting in Python is the process of converting a variable from one data type to another. This is useful when you need to perform operations that require a specific data type.\n",
        "\n",
        "*Types of Type Casting:*\n",
        "\n",
        "1. Implicit Type Casting (Automatic)\n",
        "2. Explicit Type Casting (Manual)\n",
        "\n",
        "*Implicit Type Casting:*\n",
        "\n",
        "Python automatically converts data types in certain situations:\n",
        "\n",
        "- Integer to Float: `a = 5 / 2` (2.5)\n",
        "- Integer to Complex: `a = 5 + 2j`\n",
        "- Float to Complex: `a = 5.5 + 2j`\n",
        "- Boolean to Integer: `a = True + 5` (6)\n",
        "- String to List (using `list()` function): `a = list(\"hello\")` (`['h', 'e', 'l', 'l', 'o']`)\n",
        "\n",
        "*Explicit Type Casting:*\n",
        "\n",
        "Use built-in functions to manually convert data types:\n",
        "\n",
        "*1. Integer Type Casting:*\n",
        "\n",
        "- `int()` : Convert to integer\n",
        "- Examples:\n",
        "    - `a = int(5.5)` (5)\n",
        "    - `a = int(\"123\")` (123)\n",
        "\n",
        "*2. Float Type Casting:*\n",
        "\n",
        "- `float()` : Convert to float\n",
        "- Examples:\n",
        "    - `a = float(5)` (5.0)\n",
        "    - `a = float(\"123.45\")` (123.45)\n",
        "\n",
        "*3. String Type Casting:*\n",
        "\n",
        "- `str()` : Convert to string\n",
        "- Examples:\n",
        "    - `a = str(123)` (\"123\")\n",
        "    - `a = str(45.67)` (\"45.67\")\n",
        "\n",
        "*4. Boolean Type Casting:*\n",
        "\n",
        "- `bool()` : Convert to boolean\n",
        "- Examples:\n",
        "    - `a = bool(5)` (True)\n",
        "    - `a = bool(0)` (False)\n",
        "\n",
        "*5. List Type Casting:*\n",
        "\n",
        "- `list()` : Convert to list\n",
        "- Examples:\n",
        "    - `a = list(\"hello\")` (`['h', 'e', 'l', 'l', 'o']`)\n",
        "    - `a = list((1, 2, 3))` ([1, 2, 3])\n",
        "\n",
        "*6. Tuple Type Casting:*\n",
        "\n",
        "- `tuple()` : Convert to tuple\n",
        "- Examples:\n",
        "    - `a = tuple([1, 2, 3])` ((1, 2, 3))\n",
        "    - `a = tuple(\"hello\")` (('h', 'e', 'l', 'l', 'o'))\n",
        "\n",
        "*7. Dictionary Type Casting:*\n",
        "\n",
        "- `dict()` : Convert to dictionary\n",
        "- Examples:\n",
        "    - `a = dict(name=\"John\", age=30)` (`{'name': 'John', 'age': 30}`)\n",
        "    - `a = dict([(1, \"a\"), (2, \"b\")])` ({1: 'a', 2: 'b'})\n",
        "\n",
        "*8. Set Type Casting:*\n",
        "\n",
        "- `set()` : Convert to set\n",
        "- Examples:\n",
        "    - `a = set([1, 2, 3, 3, 4])` ({1, 2, 3, 4})\n",
        "    - `a = set(\"hello\")` ({'h', 'e', 'l', 'o'})\n",
        "\n",
        "*9. Complex Type Casting:*\n",
        "\n",
        "- `complex()` : Convert to complex\n",
        "- Examples:\n",
        "    - `a = complex(5)` (5+0j)\n",
        "    - `a = complex(5, 2)` (5+2j)\n",
        "\n",
        "These are the main type casting functions in Python.\n",
        "\n"
      ],
      "metadata": {
        "id": "VFMCjzltNuz7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "5) explain the concept of type casting in python with examples"
      ],
      "metadata": {
        "id": "4tcQZd7FOGNH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Type casting in Python is the process of converting a variable from one data type to another. This is useful when you need to perform operations that require a specific data type.\n",
        "\n",
        "*Types of Type Casting:*\n",
        "\n",
        "1. Implicit Type Casting (Automatic)\n",
        "2. Explicit Type Casting (Manual)\n",
        "\n",
        "*Implicit Type Casting:*\n",
        "\n",
        "Python automatically converts data types in certain situations:\n",
        "\n",
        "- Integer to Float: `a = 5 / 2` (2.5)\n",
        "- Integer to Complex: `a = 5 + 2j`\n",
        "- Float to Complex: `a = 5.5 + 2j`\n",
        "- Boolean to Integer: `a = True + 5` (6)\n",
        "- String to List (using `list()` function): `a = list(\"hello\")` (`['h', 'e', 'l', 'l', 'o']`)\n",
        "\n",
        "*Explicit Type Casting:*\n",
        "\n",
        "Use built-in functions to manually convert data types:\n",
        "\n",
        "*1. Integer Type Casting:*\n",
        "\n",
        "- `int()` : Convert to integer\n",
        "- Examples:\n",
        "    - `a = int(5.5)` (5)\n",
        "    - `a = int(\"123\")` (123)\n",
        "\n",
        "*2. Float Type Casting:*\n",
        "\n",
        "- `float()` : Convert to float\n",
        "- Examples:\n",
        "    - `a = float(5)` (5.0)\n",
        "    - `a = float(\"123.45\")` (123.45)\n",
        "\n",
        "*3. String Type Casting:*\n",
        "\n",
        "- `str()` : Convert to string\n",
        "- Examples:\n",
        "    - `a = str(123)` (\"123\")\n",
        "    - `a = str(45.67)` (\"45.67\")\n",
        "\n",
        "*4. Boolean Type Casting:*\n",
        "\n",
        "- `bool()` : Convert to boolean\n",
        "- Examples:\n",
        "    - `a = bool(5)` (True)\n",
        "    - `a = bool(0)` (False)\n",
        "\n",
        "*5. List Type Casting:*\n",
        "\n",
        "- `list()` : Convert to list\n",
        "- Examples:\n",
        "    - `a = list(\"hello\")` (`['h', 'e', 'l', 'l', 'o']`)\n",
        "    - `a = list((1, 2, 3))` ([1, 2, 3])\n",
        "\n",
        "*6. Tuple Type Casting:*\n",
        "\n",
        "- `tuple()` : Convert to tuple\n",
        "- Examples:\n",
        "    - `a = tuple([1, 2, 3])` ((1, 2, 3))\n",
        "    - `a = tuple(\"hello\")` (('h', 'e', 'l', 'l', 'o'))\n",
        "\n",
        "*7. Dictionary Type Casting:*\n",
        "\n",
        "- `dict()` : Convert to dictionary\n",
        "- Examples:\n",
        "    - `a = dict(name=\"John\", age=30)` (`{'name': 'John', 'age': 30}`)\n",
        "    - `a = dict([(1, \"a\"), (2, \"b\")])` ({1: 'a', 2: 'b'})\n",
        "\n",
        "*8. Set Type Casting:*\n",
        "\n",
        "- `set()` : Convert to set\n",
        "- Examples:\n",
        "    - `a = set([1, 2, 3, 3, 4])` ({1, 2, 3, 4})\n",
        "    - `a = set(\"hello\")` ({'h', 'e', 'l', 'o'})\n",
        "\n",
        "*9. Complex Type Casting:*\n",
        "\n",
        "- `complex()` : Convert to complex\n",
        "- Examples:\n",
        "    - `a = complex(5)` (5+0j)\n",
        "    - `a = complex(5, 2)` (5+2j)\n",
        "\n",
        "These are the main type casting functions in Python.\n",
        "\n"
      ],
      "metadata": {
        "id": "Hg7TfowEQJZ1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "6) how do conditional statements work in python? illustrate with examples"
      ],
      "metadata": {
        "id": "sITp36QfQPd5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Conditional statements in Python are used to execute different blocks of code based on specific conditions or decisions. They are crucial for controlling the flow of a program.\n",
        "\n",
        "*Types of Conditional Statements:*\n",
        "\n",
        "1. If Statement\n",
        "2. If-Else Statement\n",
        "3. If-Elif-Else Statement\n",
        "4. Nested If Statements\n",
        "\n",
        "*Syntax and Examples:*\n",
        "\n",
        "1. *If Statement*\n",
        "\n",
        "Executes a block of code if the condition is true.\n",
        "\n",
        "```\n",
        "x = 5\n",
        "if x > 10:\n",
        "    print(\"x is greater than 10\")\n",
        "```\n",
        "\n",
        "2. *If-Else Statement*\n",
        "\n",
        "Executes one block of code if the condition is true and another if it's false.\n",
        "\n",
        "```\n",
        "x = 5\n",
        "if x > 10:\n",
        "    print(\"x is greater than 10\")\n",
        "else:\n",
        "    print(\"x is less than or equal to 10\")\n",
        "```\n",
        "\n",
        "3. *If-Elif-Else Statement*\n",
        "\n",
        "Executes different blocks of code based on multiple conditions.\n",
        "\n",
        "```\n",
        "x = 5\n",
        "if x > 10:\n",
        "    print(\"x is greater than 10\")\n",
        "elif x == 5:\n",
        "    print(\"x is equal to 5\")\n",
        "else:\n",
        "    print(\"x is less than 5\")\n",
        "```\n",
        "\n",
        "4. *Nested If Statements*\n",
        "\n",
        "Executes multiple levels of conditional checks.\n",
        "\n",
        "```\n",
        "x = 5\n",
        "y = 3\n",
        "if x > 10:\n",
        "    if y > 2:\n",
        "        print(\"x is greater than 10 and y is greater than 2\")\n",
        "    else:\n",
        "        print(\"x is greater than 10 but y is not greater than 2\")\n",
        "else:\n",
        "    print(\"x is not greater than 10\")\n",
        "```\n",
        "\n",
        "*Conditional Operators:*\n",
        "\n",
        "1. `==` (Equal to)\n",
        "2. `!=` (Not equal to)\n",
        "3. `>` (Greater than)\n",
        "4. `<` (Less than)\n",
        "5. `>=` (Greater than or equal to)\n",
        "6. `<=` (Less than or equal to)\n",
        "\n",
        "*Logical Operators:*\n",
        "\n",
        "1. `and` (Both conditions must be true)\n",
        "2. `or` (At least one condition must be true)\n",
        "3. `not` (Negates the condition)\n",
        "\n",
        "```\n",
        "x = 5\n",
        "y = 3\n",
        "if x > 10 and y > 2:\n",
        "    print(\"both conditions are true\")"
      ],
      "metadata": {
        "id": "OZRsA6WBQoVt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "7) describe the different types of loops in python and their use cases with examples"
      ],
      "metadata": {
        "id": "r8tYDkCjRJhl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Python has two primary types of loops: For Loops and While Loops. Additionally, there are other specialized loops like Enumerate, Zip, and Dictionary Loops.\n",
        "\n",
        "*1. For Loop*\n",
        "\n",
        "Iterates over a sequence (list, tuple, string, etc.) or an iterable object.\n",
        "\n",
        "Syntax:\n",
        "```\n",
        "for variable in iterable:\n",
        "    # code to execute\n",
        "```\n",
        "Example:\n",
        "```\n",
        "fruits = ['apple', 'banana', 'cherry']\n",
        "for fruit in fruits:\n",
        "    print(fruit)\n",
        "```\n",
        "Output:\n",
        "```\n",
        "apple\n",
        "banana\n",
        "cherry\n",
        "```\n",
        "Use cases:\n",
        "\n",
        "- Iterating over lists, tuples, or strings\n",
        "- Processing data from files or databases\n",
        "\n",
        "*2. While Loop*\n",
        "\n",
        "Continues to execute until a condition is met.\n",
        "\n",
        "Syntax:\n",
        "```\n",
        "while condition:\n",
        "    # code to execute\n",
        "```\n",
        "Example:\n",
        "```\n",
        "i = 0\n",
        "while i < 5:\n",
        "    print(i)\n",
        "    i += 1\n",
        "```\n",
        "Output:\n",
        "```\n",
        "0\n",
        "1\n",
        "2\n",
        "3\n",
        "4\n",
        "```\n",
        "Use cases:\n",
        "\n",
        "- Repeating tasks until a condition is met\n",
        "- Handling user input or interactive programs\n",
        "\n",
        "*3. Enumerate Loop*\n",
        "\n",
        "Iterates over a sequence and provides both index and value.\n",
        "\n",
        "Syntax:\n",
        "```\n",
        "for index, value in enumerate(iterable):\n",
        "    # code to execute\n",
        "```\n",
        "Example:\n",
        "```\n",
        "fruits = ['apple', 'banana', 'cherry']\n",
        "for i, fruit in enumerate(fruits):\n",
        "    print(f\"{i}: {fruit}\")\n",
        "```\n",
        "Output:\n",
        "```\n",
        "0: apple\n",
        "1: banana\n",
        "2: cherry\n",
        "```\n",
        "Use cases:\n",
        "\n",
        "- Processing data with indices\n",
        "- Creating numbered lists\n",
        "\n",
        "*4. Zip Loop*\n",
        "\n",
        "Iterates over multiple sequences in parallel.\n",
        "\n",
        "Syntax:\n",
        "```\n",
        "for value1, value2 in zip(iterable1, iterable2):\n",
        "    # code to execute\n",
        "```\n",
        "Example:\n",
        "```\n",
        "names = ['John', 'Jane', 'Bob']\n",
        "ages = [25, 30, 35]\n",
        "for name, age in zip(names, ages):\n",
        "    print(f\"{name}: {age}\")\n",
        "```\n",
        "Output:\n",
        "```\n",
        "John: 25\n",
        "Jane: 30\n",
        "Bob: 35\n",
        "```\n",
        "Use cases:\n",
        "\n",
        "- Processing multiple related datasets\n",
        "- Creating paired data structures\n",
        "\n",
        "*5. Dictionary Loop*\n",
        "\n",
        "Iterates over a dictionary's key-value pairs.\n",
        "\n",
        "Syntax:\n",
        "```\n",
        "for key, value in dictionary.items():\n",
        "    # code to execute\n",
        "```\n",
        "Example:\n",
        "```\n",
        "person = {'name': 'John', 'age': 25, 'city': 'New York'}\n",
        "for key, value in person.items():\n",
        "    print(f\"{key}: {value}\")\n",
        "```\n",
        "Output:\n",
        "```\n",
        "name: John\n",
        "age: 25\n",
        "city: New York\n",
        "```\n",
        "Use cases:\n",
        "\n",
        "- Processing dictionary data\n",
        "- Creating configuration files\n",
        "\n",
        "*6. Nested Loops*\n",
        "\n",
        "Loops within loops.\n",
        "\n",
        "Example:\n",
        "```\n",
        "for i in range(3):\n",
        "    for j in range(2):\n",
        "        print(f\"({i}, {j})\")\n",
        "```\n",
        "Output:\n",
        "```\n",
        "(0, 0)\n",
        "(0, 1)\n",
        "(1, 0)\n",
        "(1, 1)\n",
        "(2, 0)\n",
        "(2, 1)\n",
        "```\n",
        "Use cases:\n",
        "\n",
        "- Processing multidimensional data\n",
        "- Creating complex data structures\n",
        "\n",
        "These are the primary types of loops in Python.\n",
        "\n"
      ],
      "metadata": {
        "id": "9bQfRRoJReUr"
      }
    }
  ]
}